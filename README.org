+Title: Reading ProGit
#+author: Denis Labaye
#+STARTUP: indent
#+STARTUP: hidestars odd

* [[http://progit.org/book/][pro-git]] [0/11]

*** TODO 1) Getting Started [3/7]
***** DONE 1.1 - About Version Control
      CLOSED: [2011-08-07 Sun 19:59]

******* L : what are 4 big evolutions of version control, with their drawbacks ?

        - Manual VCS (Version Control System): Copy backup files to
          timestamped directories
          - cons: error prone
        - Local VCS: tool that keep all
          changes in a local database
          - cons: How to collaborate with other people? 
        - Centralized VCS (CVCS): Allow collaboration
          - cons: single point of failure
        - Distributed VCS (DVCS): Complete repository is on each
          clients: if any of the client loses its data: it's keept on
          all other clients
          - pros: more flexible, allows differents workflows for the
            same project, eg hiearchical models which are not possible
            with CVCS

***** DONE 1.2 - A Short History of Git
      CLOSED: [2011-08-07 Sun 20:00]
***** DONE 1.3 - Git Basics
      CLOSED: [2011-08-07 Sun 20:08]
******* ??? : I don't understand the difference between, thinking of data as deltas, or thinking of data as snapshots (like git does)

********* deltas => difference between versions so svn saved  only delta for
each revision and so for having a file, it takes the first version and
apply each diff till the end

********* snapshots => all datas are saved but if a file did not change, it
makes a pointer to the last version it knows

******* L : advantages of git ? 
        - almost every operation is local : you can be offline
        - integrity : everything checksumed cryptographically (sha-1)
        - your data is safe: almost all git does is add data, so it's
          difficult do lose data
***** TODO 1.4 - Installing Git
***** TODO 1.5 - First-Time Git Setup
***** TODO 1.6 - Getting Help
***** TODO 1.7 - Summary
*** TODO 2) Git Basics [0/8]
***** TODO 2.1 - Getting a Git Repository
***** TODO 2.2 - Recording Changes to the Repository
***** TODO 2.3 - Viewing the Commit History
***** TODO 2.4 - Undoing Things
***** TODO 2.5 - Working with Remotes
***** TODO 2.6 - Tagging
***** TODO 2.7 - Tips and Tricks
***** TODO 2.8 - Summary
*** TODO 3) Git Branching [0/7]
***** TODO 3.1 - What a Branch Is
***** TODO 3.2 - Basic Branching and Merging
***** TODO 3.3 - Branch Management
***** TODO 3.4 - Branching Workflows
***** TODO 3.5 - Remote Branches
***** TODO 3.6 - Rebasing
***** TODO 3.7 - Summary
*** TODO 4) Git on the Server [0/11]
***** TODO 4.1 - The Protocols
***** TODO 4.2 - Getting Git on a Server
***** TODO 4.3 - Generating Your SSH Public Key
***** TODO 4.4 - Setting Up the Server
***** TODO 4.5 - Public Access
***** TODO 4.6 - GitWeb
***** TODO 4.7 - Gitosis
***** TODO 4.8 - Gitolite
***** TODO 4.9 - Git Daemon
***** TODO 4.10 - Hosted Git
***** TODO 4.11 - Summary
*** TODO 5) Distributed Git [0/4]
***** TODO 5.1 - Distributed Workflows
***** TODO 5.2 - Contributing to a Project
***** TODO 5.3 - Maintaining a Project
***** TODO 5.4 - Summary
*** TODO 6) Git Tools [0/8]
***** TODO 6.1 - Revision Selection
***** TODO 6.2 - Interactive Staging
***** TODO 6.3 - Stashing
***** TODO 6.4 - Rewriting History
***** TODO 6.5 - Debugging with Git
***** TODO 6.6 - Submodules
***** TODO 6.7 - Subtree Merging
***** TODO 6.8 - Summary
*** TODO 7) Customizing Git [0/5]
***** TODO 7.1 - Git Configuration
***** TODO 7.2 - Git Attributes
***** TODO 7.3 - Git Hooks
***** TODO 7.4 - An Example Git-Enforced Policy
***** TODO 7.5 - Summary
*** TODO 8) Git and Other Systems [0/3]
***** TODO 8.1 - Git and Subversion
***** TODO 8.2 - Migrating to Git
***** TODO 8.3 - Summary
*** TODO 9) Git Internals [0/7]
***** TODO 9.1 - Plumbing and Porcelain
***** TODO 9.2 - Git Objects
***** TODO 9.3 - Git References
***** TODO 9.4 - Packfiles
***** TODO 9.5 - The Refspec
***** TODO 9.6 - Transfer Protocols
***** TODO 9.7 - Maintenance and Data Recovery
*** TODO 10) 9.8 - Summary
*** TODO 11) Index of Commands
